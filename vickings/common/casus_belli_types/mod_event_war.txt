##########
# Special 'claim' CB used by Ferdinand VII to invade seize all of Spain.
# If victorious, Ferdinand personally seizes all land in Iberia (ostensibly to distribute to good Spanish vassals). Otherwise should be mostly-identical to a Claim CB.
##########

peninsular_cb = {
	group = event
	mutually_exclusive_titles = {
		always = yes
	}

	white_peace_possible = no	# in their eyes, equivalent to surrender

	allowed_for_character = {}

	allowed_against_character = {
		faith.religion = scope:attacker.faith.religion
	}

	# Root is the title
	# scope:claimant is the claimant
	# scope:attacker is the attacker
	# scope:defender is the defender
	is_allowed_claim_title = {
		scope:claimant =  {
			NOT = { has_trait = incapable }
			is_imprisoned = no
			OR = {
				this = scope:attacker
				AND = {
					religion = scope:attacker.religion
					dynasty = scope:attacker.dynasty
				}
			}
		}
	}

	cost = {}

	target_titles = claim
	#target_title_tier = all

	on_declaration = {
		on_declared_war = yes
	}

	should_invalidate = {
		NOT = {
			any_in_list = {
				list = target_titles
				any_in_de_jure_hierarchy = {
					tier >= tier_county
					exists = holder
					holder = {
						OR = {
							this = scope:defender
							target_is_liege_or_above = scope:defender
						}
					}
				}
			}
		}
	}

	on_invalidated_desc = msg_claim_war_invalidated_message
	
	on_invalidated = {
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:claimant = { is_local_player = yes }
				}
				desc = claim_cb_victory_desc_attacker_claimant
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = claim_cb_victory_desc_attacker
			}
			desc = claim_cb_victory_desc
		}
	}

	on_victory = {
		create_title_and_vassal_change = {
			type = conquest_claim
			save_scope_as = change
			add_claim_on_loss = yes
		}

		# Create a claim CB which is executed to handle title/vassal changes, in addition to being used to calculate Prestige awards for war participants.
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			change = scope:change
		}

		every_in_list = {
			list = target_titles

			#Remove elective succession law from k_england.
			clear_title_laws = yes

			# Personally seize all duchy titles in Southern England AND duchy titles personally held by the King of England.
			every_in_de_jure_hierarchy = {
				limit = {
					tier = tier_duchy
					special_invasion_cb_seize_land_in_region_trigger = {
						TARGET_REGION = world_europe_west_iberia
						#TARGET_KINGDOM = title:e_spain
					}
				}
				if = {
					limit = {
						exists = holder
						holder = {
							exists = top_liege
							top_liege = scope:defender
							# Vassal players in England get to keep their holdings, so they can play as vassals of the new king instead of game-overing.
							NAND = {
								NOT = { this = top_liege }
								OR = {
									this = scope:attacker
									is_ai = no
								}
							}
						}
					}
					custom_description = {
						text = custom_seize_title_and_below_de_jure
						subject = scope:claimant
						object = this
						change_title_holder = {
							holder = scope:claimant
							change = scope:change
							take_baronies = yes
						}
					}

					# Grab the counties that go with the duchies, too.
					every_in_de_jure_hierarchy = {
						limit = {
							tier = tier_county
							exists = holder
							holder = {
								top_liege = scope:defender
								# Vassal players in England get to keep their holdings, so they can play as vassals of the new king instead of game-overing.
								NAND = {
									NOT = { this = top_liege }
									OR = {
										this = scope:attacker
										is_ai = no
									}
								}
							}
						}
						hidden_effect = {
							change_title_holder = {
								holder = scope:claimant
								change = scope:change
								take_baronies = yes
							}
						}
						add_to_temporary_list = county_titles_under_transfer
					}
				}
			}
			# Personally seize every county title in the Southern England AND county titles personally held by the King of England.
			every_in_de_jure_hierarchy = {
				limit = {
					tier = tier_county
					special_invasion_cb_seize_land_in_region_trigger = {
						TARGET_REGION = world_europe_west_iberia
						#TARGET_KINGDOM = title:e_spain
					}
					NOT = { is_in_list = county_titles_under_transfer }
				}
				if = {
					limit = {
						exists = holder
						holder = {
							exists = top_liege
							top_liege = scope:defender
							# Vassal players in England get to keep their holdings, so they can play as vassals of the new king instead of game-overing.
							NAND = {
								NOT = { this = top_liege }
								OR = {
									this = scope:attacker
									is_ai = no
								}
							}
						}
					}
					custom_description = {
						text = custom_seize_title
						subject = scope:claimant
						object = this
						change_title_holder = {
							holder = scope:claimant
							change = scope:change
							take_baronies = yes
						}
					}
				}
			}
			# Personally seize all county titles in Canarias
			every_in_de_facto_hierarchy = {
				limit = {
					tier = tier_county
					special_invasion_cb_seize_land_in_region_trigger = {
						TARGET_REGION = world_africa_north_west
						#TARGET_KINGDOM = title:k_maghreb
					}
					NOT = { is_in_list = county_titles_under_transfer }
				}
				if = {
					limit = {
						exists = holder
						holder = {
							exists = top_liege
							top_liege = scope:defender

							# Vassal players in England get to keep their holdings, so they can play as vassals of the new king instead of game-overing.
							NAND = {
								NOT = { this = top_liege }
								is_ai = no
							}
						}
					}
					custom_description = {
						text = custom_seize_title
						subject = scope:claimant
						object = this
						change_title_holder = {
							holder = scope:claimant
							change = scope:change
							take_baronies = yes
						}
					}
				}
			}
		}

		resolve_title_and_vassal_change = scope:change

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:claimant.primary_title.tier < scope:attacker.primary_title.tier
				trigger_if = {
					limit = {
						exists = scope:claimant.liege
					}
					NOT = { scope:claimant.liege = scope:attacker }
				}
				trigger_else = {
					always = yes
				}
			}

			create_title_and_vassal_change = {
				type = conquest_claim
				save_scope_as = change_two
				add_claim_on_loss = yes
			}
			scope:attacker = {
				change_liege = {
					liege = scope:claimant
					change = scope:change_two
				}
			}
			resolve_title_and_vassal_change = scope:change_two
		}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:attacker = {
					can_add_hook = {
					  	type = favor_hook
					  	target = scope:claimant
					}
				}
			}
			scope:attacker = {
				add_hook = {
		  			target = scope:claimant
		  			type = favor_hook
		 		}
			}
		}

		# Joseph retreats to Napoleon's court
		character:9000001 = {
			recruit_courtier = scope:defender
		}

		scope:claimant = {
			release_from_prison = yes
		}

		# Attacker gets Prestige Experience, Defender loses Prestige, all other participants gain Prestige based on their war contribution.
		modify_all_participants_fame_values = {
			WINNER = scope:attacker
			LOSER = scope:defender
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = 10
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		# truce
		add_truce_attacker_victory_effect = yes

	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = claim_cb_white_peace_desc_defender
			}
			desc = claim_cb_white_peace_desc
		}
	}

	on_white_peace = {

		# press claims
		every_in_list = {
			list = target_titles
			if = {
				limit = { scope:claimant = { has_weak_claim_on = prev } }
				scope:claimant = {
					make_claim_strong = prev
				}
			}
		}

		# Create an 'helper' claim CB which we won't execute, but can use to determine how much Prestige should be given to war participants.
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			victory = no
		}
		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = scope:cb_prestige_factor # Set by 'setup_claim_cb'
				multiply = -5.0
			}
		}
		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}
		# Defender neither gains nor loses any prestige.

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:attacker = {
					can_add_hook = {
					  	type = favor_hook
					  	target = scope:claimant
					}
				}
			}
			scope:attacker = {
				add_hook = {
		  			target = scope:claimant
		  			type = favor_hook
		 		}
			}
		}

		# Truce
		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = { scope:claimant = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_attacker_claimant
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_attacker
			}
			desc = claim_cb_defeat_desc
		}
	}

	on_defeat = {

		# lose claims
		every_in_list = {
			list = target_titles
			scope:claimant = {
				remove_claim = prev
			}
		}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:attacker = {
					can_add_hook = {
					  	type = favor_hook
					  	target = scope:claimant
					}
				}
			}
			scope:attacker = {
				add_hook = {
		  			target = scope:claimant
		  			type = favor_hook
		 		}
			}
		}

		# Attacker pays gold to the defender as reparations.
		scope:attacker = {
			pay_short_term_gold = {
				gold = 3
				target = scope:defender
				yearly_income = yes
			}
		}
		# Create an 'helper' claim CB which we won't execute, but can use to determine how much Prestige should be given to war participants.
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			victory = no
		}
		# Attacker loses Prestige, all other war participants gain Prestige (Defender gains full prestige, all allies on both sides gain based on war contribution).
		modify_all_participants_fame_values = {
			WINNER = scope:defender
			LOSER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = 10
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		# Truce
		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	transfer_behavior = transfer

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "CLAIM_WAR_NAME"
	my_war_name = "CLAIM_WAR_NAME_MY"
	war_name_base = "CLAIM_WAR_NAME_BASE"
	cb_name = "CLAIM_CB_NAME"
	interface_priority = 60

	should_show_war_goal_subview = yes

	attacker_wargoal_percentage = 0.8

	max_ai_diplo_distance_to_title = 1000
}

##########
# Special 'invasion' CB used by Napoleon to invade Russia in 1812.
# If victorious, Tsar Alexander would pay Napoleon hefty reparations and force alliance. Not identical to an Invasion CB at all.
##########
napoleon_invasion_cb = {
	group = event
	mutually_exclusive_titles = {
		always = yes
	}

	allowed_for_character = {}

	allowed_against_character = {
	}

	# Root is the title
	# scope:claimant is the claimant
	# scope:attacker is the attacker
	# scope:defender is the defender
	is_allowed_claim_title = {
		scope:claimant =  {
			NOT = { has_trait = incapable }
			is_imprisoned = no
			OR = {
				this = scope:attacker
				AND = {
					religion = scope:attacker.religion
					dynasty = scope:attacker.dynasty
				}
			}
		}
	}

	cost = {}

	target_titles = claim
	#target_title_tier = all

	on_declaration = {
		on_declared_war = yes
	}

	should_invalidate = {
	}

	on_invalidated_desc = msg_claim_war_invalidated_message
	
	on_invalidated = {
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:claimant = { is_local_player = yes }
				}
				desc = claim_cb_victory_desc_attacker_claimant
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = claim_cb_victory_desc_attacker
			}
			desc = claim_cb_victory_desc
		}
	}

	on_victory = {
		create_title_and_vassal_change = {
			type = conquest_claim
			save_scope_as = change
			add_claim_on_loss = yes
		}

		# Create a claim CB which is executed to handle title/vassal changes, in addition to being used to calculate Prestige awards for war participants.
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			change = scope:change
		}

		every_in_list = {
			list = target_titles

			#Remove elective succession law from k_england.
			clear_title_laws = yes

			# Personally seize all duchy titles in Southern England AND duchy titles personally held by the King of England.
			every_in_de_jure_hierarchy = {
				limit = {
					tier = tier_duchy
					special_invasion_cb_seize_land_in_region_trigger = {
						TARGET_REGION = world_europe_east
						TARGET_KINGDOM = title:k_lithuania
					}
				}
				if = {
					limit = {
						exists = holder
						holder = {
							exists = top_liege
							top_liege = scope:defender
						
							# Vassal players in England get to keep their holdings, so they can play as vassals of the new king instead of game-overing.
							NAND = {
								NOT = { this = top_liege }
								is_ai = no
							}
						}					
					}
					custom_description = {
						text = custom_seize_title_and_below_de_jure
						subject = scope:claimant
						object = this
						change_title_holder = {
							holder = scope:claimant
							change = scope:change
							take_baronies = yes
						}
					}

					# Grab the counties that go with the duchies, too.
					every_in_de_jure_hierarchy = {
						limit = {
							tier = tier_county
							exists = holder
							holder = {
								top_liege = scope:defender

								# Vassal players in England get to keep their holdings, so they can play as vassals of the new king instead of game-overing.
								NAND = {
									NOT = { this = top_liege }
									is_ai = no
								}
							}
						}
						hidden_effect = {
							change_title_holder = {
								holder = scope:claimant
								change = scope:change
								take_baronies = yes
							}
						}
						add_to_temporary_list = county_titles_under_transfer
					}
				}
			}
			# Personally seize every county title in the Southern England AND county titles personally held by the King of England.
			every_in_de_jure_hierarchy = {
				limit = {
					tier = tier_county
					special_invasion_cb_seize_land_in_region_trigger = {
						TARGET_REGION = world_europe_east
						TARGET_KINGDOM = title:k_lithuania
					}
					NOT = { is_in_list = county_titles_under_transfer }
				}
				if = {
					limit = {
						exists = holder
						holder = {
							exists = top_liege
							top_liege = scope:defender

							# Vassal players in England get to keep their holdings, so they can play as vassals of the new king instead of game-overing.
							NAND = {
								NOT = { this = top_liege }
								is_ai = no
							}
						}
					}
					custom_description = {
						text = custom_seize_title
						subject = scope:claimant
						object = this
						change_title_holder = {
							holder = scope:claimant
							change = scope:change
							take_baronies = yes
						}
					}
				}
			}
			# Personally seize all county titles in Canarias
			every_in_de_jure_hierarchy = {
				limit = {
					tier = tier_county
					special_invasion_cb_seize_land_in_region_trigger = {
						TARGET_REGION = world_europe_east
						TARGET_KINGDOM = title:k_esthonia
					}
					NOT = { is_in_list = county_titles_under_transfer }
				}
				if = {
					limit = {
						exists = holder
						holder = {
							exists = top_liege
							top_liege = scope:defender
					
							# Vassal players in England get to keep their holdings, so they can play as vassals of the new king instead of game-overing.
							NAND = {
								NOT = { this = top_liege }
								is_ai = no
							}
						}
					}
					custom_description = {
						text = custom_seize_title
						subject = scope:claimant
						object = this
						change_title_holder = {
							holder = scope:claimant
							change = scope:change
							take_baronies = yes
						}
					}
				}
			}
		}

		resolve_title_and_vassal_change = scope:change

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:claimant.primary_title.tier < scope:attacker.primary_title.tier
				trigger_if = {
					limit = {
						exists = scope:claimant.liege
					}
					NOT = { scope:claimant.liege = scope:attacker }
				}
				trigger_else = {
					always = yes
				}
			}

			create_title_and_vassal_change = {
				type = conquest_claim
				save_scope_as = change_two
				add_claim_on_loss = yes
			}
			scope:claimant = {
				change_liege = {
					liege = scope:attacker
					change = scope:change_two
				}
				release_from_prison = yes
				vassal_contract_set_obligation_level = {
					type = special_contract
					level = 2	#special_contract_march
				}
			}
			resolve_title_and_vassal_change = scope:change_two
		}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:attacker = {
					can_add_hook = {
					  	type = favor_hook
					  	target = scope:claimant
					}
				}
			}
			scope:attacker = {
				add_hook = {
		  			target = scope:claimant
		  			type = favor_hook
		 		}
			}
		}

		if = {
			limit = {
				character:9000027 = {
					has_title = title:k_saxony
				}
			}
			random_ruler = {
				limit = {
					has_title = title:d_warsaw
				}
				get_title = title:c_cherven
				get_title = title:c_peresopnytsia
				get_title = title:c_volodymyr
				get_title = title:c_dorohychyn
				get_title = title:c_berestye
				get_title = title:c_volkovysk
				get_title = title:c_novogrudok
				get_title = title:c_grodno
				destroy_title = title:d_volhynia
				destroy_title = title:d_grodno
			}
		}

		scope:attacker = {
			create_alliance = scope:defender
		}

		# Defender pays gold to the attacker as reparations.
		scope:defender = {
			pay_short_term_gold = {
				gold = 5
				target = scope:attacker
				yearly_income = yes
			}
			# This opinion modifier controls the interaction, and is removed when breaking the alliance in any way (though on_actions)
			add_opinion = {
				modifier = perk_negotiated_alliance_opinion
				target = scope:attacker
			}
		}


		# Attacker gets Prestige Experience, Defender loses Prestige, all other participants gain Prestige based on their war contribution.
		modify_all_participants_fame_values = {
			WINNER = scope:attacker
			LOSER = scope:defender
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = 10
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		# truce
		add_truce_attacker_victory_effect = yes

	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = claim_cb_white_peace_desc_defender
			}
			desc = claim_cb_white_peace_desc
		}
	}

	on_white_peace = {

		# press claims
		every_in_list = {
			list = target_titles
			if = {
				limit = { scope:claimant = { has_weak_claim_on = prev } }
				scope:claimant = {
					make_claim_strong = prev
				}
			}
		}

		# Create an 'helper' claim CB which we won't execute, but can use to determine how much Prestige should be given to war participants.
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			victory = no
		}
		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = scope:cb_prestige_factor # Set by 'setup_claim_cb'
				multiply = -5.0
			}
		}
		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}
		# Defender neither gains nor loses any prestige.

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:attacker = {
					can_add_hook = {
					  	type = favor_hook
					  	target = scope:claimant
					}
				}
			}
			scope:attacker = {
				add_hook = {
		  			target = scope:claimant
		  			type = favor_hook
		 		}
			}
		}

		# Truce
		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = { scope:claimant = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_attacker_claimant
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_attacker
			}
			desc = claim_cb_defeat_desc
		}
	}

	on_defeat = {

		# lose claims
		every_in_list = {
			list = target_titles
			scope:claimant = {
				remove_claim = prev
			}
		}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:attacker = {
					can_add_hook = {
					  	type = favor_hook
					  	target = scope:claimant
					}
				}
			}
			scope:attacker = {
				add_hook = {
		  			target = scope:claimant
		  			type = favor_hook
		 		}
			}
		}

		# Attacker pays gold to the defender as reparations.
		scope:attacker = {
			pay_short_term_gold = {
				gold = 3
				target = scope:defender
				yearly_income = yes
			}
		}

		scope:attacker = {
			custom_tooltip = congress_of_vienna_war_desc
			scope:defender = {
				destroy_title = title:k_lithuania
				destroy_title = title:k_esthonia
				if = {
					limit = {
						title:e_austria.holder = { is_ai = no }
					}
					title:e_austria.holder = { trigger_event = { id = congress_of_vienna.1 days = 1 } }
				}
				else = {
					trigger_event = { id = congress_of_vienna.1 days = 1 }
				}
			}
		}

		title:k_spain.holder = {
			if = {
				limit = {
					any_character_war = {
						using_cb = peninsular_cb
					}
				}
				random_character_war = {
					limit = {
						using_cb = peninsular_cb
					}
					end_war = attacker
				}
			}
		}

		# Create an 'helper' claim CB which we won't execute, but can use to determine how much Prestige should be given to war participants.
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			victory = no
		}
		# Attacker loses Prestige, all other war participants gain Prestige (Defender gains full prestige, all allies on both sides gain based on war contribution).
		modify_all_participants_fame_values = {
			WINNER = scope:defender
			LOSER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = 10
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		# Truce
		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}
	
	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit
	
	transfer_behavior = transfer
	
	attacker_allies_inherit = yes
	defender_allies_inherit = yes
	
	war_name = "CLAIM_WAR_NAME"
	my_war_name = "CLAIM_WAR_NAME_MY"
	war_name_base = "CLAIM_WAR_NAME_BASE"
	cb_name = "CLAIM_CB_NAME"
	interface_priority = 60
	
	attacker_wargoal_percentage = 0.8

	should_show_war_goal_subview = yes
	
	max_ai_diplo_distance_to_title = 1000
}


conquer_papal_rome_cb = {
	group = event
	mutually_exclusive_titles = {
		always = yes
	}

	allowed_for_character = {}

	allowed_against_character = {
	}

	# Root is the title
	# scope:claimant is the claimant
	# scope:attacker is the attacker
	# scope:defender is the defender
	is_allowed_claim_title = {
		scope:claimant = {
			NOT = { has_trait = incapable }
			is_imprisoned = no
			OR = {
				this = scope:attacker
				AND = {
					religion = scope:attacker.religion
					dynasty = scope:attacker.dynasty
				}
			}
		}
	}

	cost = {}

	target_titles = claim
#	target_title_tier = all

	on_declaration = {
		on_declared_war = yes
	}

	should_invalidate = {
		NOT = {
			any_in_list = {
				list = target_titles
				any_in_de_jure_hierarchy = {
					tier >= tier_county
					exists = holder
					holder = {
						OR = {
							this = scope:defender
							target_is_liege_or_above = scope:defender
						}
					}
				}
			}
		}
	}

	on_invalidated_desc = msg_claim_war_invalidated_message
	
	on_invalidated = {
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:claimant = { is_local_player = yes }
				}
				desc = claim_cb_victory_desc_attacker_claimant
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = claim_cb_victory_desc_attacker
			}
			desc = claim_cb_victory_desc
		}
	}

	on_victory = {
		create_title_and_vassal_change = {
			type = conquest_claim
			save_scope_as = change
			add_claim_on_loss = yes
		}

		# Create a claim CB which is executed to handle title/vassal changes, in addition to being used to calculate Prestige awards for war participants.
		#setup_claim_cb = {
		#	titles = target_titles
		#	attacker = scope:attacker
		#	defender = scope:defender
		#	claimant = scope:claimant
		#	change = scope:change
		#}

		scope:defender = {
			every_held_title = {
				limit = {
					NOT = { this = title:k_papal_state }
				}
				change_title_holder_include_vassals = {
					holder = scope:attacker
					change = scope:change
				}
			}
			if = {
				limit = { scope:attacker.primary_title.tier = tier_empire }
				change_liege = {
					liege = scope:attacker
					change = scope:change
				}
			}
		}

		resolve_title_and_vassal_change = scope:change

		# Attacker gets Prestige Experience, Defender loses Prestige, all other participants gain Prestige based on their war contribution.
		modify_all_participants_fame_values = {
			WINNER = scope:attacker
			LOSER = scope:defender
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = 10
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		# truce
		add_truce_attacker_victory_effect = yes

		scope:attacker = {
			if = {
				limit = { has_title = title:d_latium }
				destroy_title = title:d_latium
			}
		}
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = claim_cb_white_peace_desc_defender
			}
			desc = claim_cb_white_peace_desc
		}
	}

	on_white_peace = {
		# Create an 'helper' claim CB which we won't execute, but can use to determine how much Prestige should be given to war participants.
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			victory = no
		}
		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = scope:cb_prestige_factor # Set by 'setup_claim_cb'
				multiply = -5.0
			}
		}
		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}
		# Defender neither gains nor loses any prestige.

		# Truce
		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = { scope:claimant = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_attacker_claimant
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_attacker
			}
			desc = claim_cb_defeat_desc
		}
	}

	on_defeat = {

		# Attacker pays gold to the defender as reparations.
		scope:attacker = {
			pay_short_term_gold = {
				gold = 3
				target = scope:defender
				yearly_income = yes
			}
		}
		# Create an 'helper' claim CB which we won't execute, but can use to determine how much Prestige should be given to war participants.
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			victory = no
		}
		# Attacker loses Prestige, all other war participants gain Prestige (Defender gains full prestige, all allies on both sides gain based on war contribution).
		modify_all_participants_fame_values = {
			WINNER = scope:defender
			LOSER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = 10
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		# Truce
		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	transfer_behavior = transfer

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "CLAIM_WAR_NAME"
	my_war_name = "CLAIM_WAR_NAME_MY"
	war_name_base = "CLAIM_WAR_NAME_BASE"
	cb_name = "CLAIM_CB_NAME"
	interface_priority = 60

	should_show_war_goal_subview = yes

	attacker_wargoal_percentage = 0.8

	max_ai_diplo_distance_to_title = 1000
}

trade_war_cb = {
	group = event
	ai_only_against_neighbors = yes

	# Root is the title
	# scope:attacker is the attacker
	# scope:defender is the defender
	allowed_against_character = {
		scope:defender = {
			is_independent_ruler = yes
			trigger_if = {
				limit = { scope:attacker = { is_ai = no } } # Already pre-filtered by the AI due to ai_only_against_neighbors = yes. any_neighboring_top_liege_realm_owner is expensive
				scope:attacker = {
					any_neighboring_top_liege_realm_owner = {
						this = scope:defender
					}
				}
			}
		}
	}

	cost = {}

	should_invalidate = {
	}

	on_invalidated_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:attacker = {
						any_prisoner = { has_character_modifier = designated_human_sacrifice_modifier }
					}
				}
				desc = flowery_war_cb_ended_invalid.desc_other_sacrifices_attacker
			}
			desc = flowery_war_cb_ended_invalid.desc_no_sacrificers
		}
	}

	on_invalidated = {
		
	}

	on_declaration = {
		on_declared_war = yes
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = trade_war_cb_victory_desc_defender
			}
			desc = trade_war_cb_victory_desc
		}
	}

	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }
		scope:attacker = {
			#If the attacker has since stopped enjoying human sacrifice, then the war was just prestigious.
				if = {
					limit = { scope:defender.primary_title.tier = tier_county }
					add_prestige = { value = minor_prestige_gain }
				}
				if = {
					limit = { scope:defender.primary_title.tier = tier_duchy }
					add_prestige = { value = medium_prestige_gain }
				}
				if = {
					limit = { scope:defender.primary_title.tier = tier_kingdom }
					add_prestige = { value = major_prestige_gain }
				}
				if = {
					limit = { scope:defender.primary_title.tier = tier_empire }
					add_prestige = { value = massive_prestige_gain }
				}
		}
		scope:defender = {
			#Otherwise, the war just sucked.
				if = {
					limit = { scope:defender.primary_title.tier = tier_county }
					add_prestige = { value = minor_prestige_loss }
				}
				if = {
					limit = { scope:defender.primary_title.tier = tier_duchy }
					add_prestige = { value = medium_prestige_loss }
				}
				if = {
					limit = { scope:defender.primary_title.tier = tier_kingdom }
					add_prestige = { value = major_prestige_loss }
				}
				if = {
					limit = { scope:defender.primary_title.tier = tier_empire }
					add_prestige = { value = massive_prestige_loss }
				}
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = {
				value = major_prestige_value
			}
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = {
				value = major_prestige_value
			}
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Defender pays gold to the attacker as reparations.
		scope:defender = {
			pay_short_term_gold = {
				gold = 5
				target = scope:attacker
				yearly_income = yes
			}
		}

		# Truce
		add_truce_attacker_victory_effect = yes

	}

	on_white_peace_desc = {
		desc = trade_war_cb_white_peace_desc
	}

	on_white_peace = {
		scope:attacker = { 
			show_pow_release_message_effect = yes
			stress_impact = {
				ambitious = medium_stress_impact_gain
				arrogant = medium_stress_impact_gain
			}
		}
		scope:attacker = {	#Piety loss for the attacker if appropriate, otherwise prestige loss.
			if = {
				limit = {
					faith = { has_doctrine_parameter = human_sacrifice_active }
				}
				add_piety = religious_cb_piety_white_peace
			}
			else = {
				add_prestige = {
					value = medium_prestige_loss
				}
			}
		}



		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = {
				value = major_prestige_value
			}
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = {
				value = major_prestige_value
			}
			opinion = {
				modifier = contributed_in_war
			}
		}

		scope:defender = {
			stress_impact = {
				arrogant = medium_stress_impact_gain
			}
		}

		# Truce
		add_truce_white_peace_effect = yes

	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = trade_war_cb_defeat_desc_attacker
			}
			desc = trade_war_cb_defeat_desc
		}
	}

	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }
		scope:attacker = {
			#Otherwise, the war just sucked.
				if = {
					limit = { scope:attacker.primary_title.tier = tier_county }
					add_prestige = { value = minor_prestige_loss }
				}
				if = {
					limit = { scope:attacker.primary_title.tier = tier_duchy }
					add_prestige = { value = medium_prestige_loss }
				}
				if = {
					limit = { scope:attacker.primary_title.tier = tier_kingdom }
					add_prestige = { value = major_prestige_loss }
				}
				if = {
					limit = { scope:attacker.primary_title.tier = tier_empire }
					add_prestige = { value = massive_prestige_loss }
				}
		}
		scope:defender = {
			#Otherwise, the war was just prestigious.
				if = {
					limit = { scope:attacker.primary_title.tier = tier_county }
					add_prestige = { value = minor_prestige_gain }
				}
				if = {
					limit = { scope:attacker.primary_title.tier = tier_duchy }
					add_prestige = { value = medium_prestige_gain }
				}
				if = {
					limit = { scope:attacker.primary_title.tier = tier_kingdom }
					add_prestige = { value = major_prestige_gain }
				}
				if = {
					limit = { scope:attacker.primary_title.tier = tier_empire }
					add_prestige = { value = massive_prestige_gain }
				}
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = {
				value = major_prestige_value
			}
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = {
				value = major_prestige_value
			}
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Attacker pays gold to the defender as reparations.
		scope:attacker = {
			pay_short_term_gold = {
				gold = 5
				target = scope:defender
				yearly_income = yes
			}
		}

		# Truce
		add_truce_attacker_defeat_effect = yes

		scope:attacker = { save_temporary_scope_as = loser }
		on_lost_aggression_war_discontent_loss = yes
	}

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "FLOWERY_WAR_CB_NAME"
	war_name_base = "FLOWERY_WAR_WAR_NAME_BASE"
	cb_name = "FLOWERY_WAR_CB_NAME"
	interface_priority = 80

	ticking_war_score_targets_entire_realm = yes
	attacker_ticking_warscore = 0
	attacker_wargoal_percentage = 0.01
	attacker_score_from_occupation_scale = 50
	defender_score_from_occupation_scale = 50
	attacker_score_from_battles_scale = 200
	defender_score_from_battles_scale = 200

	max_attacker_score_from_battles = 200
	max_defender_score_from_battles = 200

	max_ai_diplo_distance_to_title = 500
}


multiple_duchy_de_jure_cb = {
	group = event
	should_check_for_interface_availability = no # Covered by the county dejure cb
	
	combine_into_one = yes
	should_show_war_goal_subview = yes
	
	allowed_for_character = {
	}

	allowed_against_character = {
	}
	target_titles = all
	target_title_tier = all
	target_de_jure_regions_above = yes
	ignore_effect = change_title_holder
	ai_only_against_neighbors = yes
	
	valid_to_start = {
		scope:target = {
			tier = tier_duchy
			any_this_title_or_de_jure_above = {
				exists = holder
				holder = {
					OR = {
						this = scope:attacker
						target_is_liege_or_above = scope:attacker
					}
				}
			}
		}
	}

	cost = {
	}

	should_invalidate = {
		NOT = {
			any_in_list = {
				list = target_titles
				any_in_de_jure_hierarchy = {
					tier = tier_county
					holder = {
						OR = {
							this = scope:defender
							target_is_liege_or_above = scope:defender
						}
					}
				}
			}
		}
	}

	on_invalidated_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:attacker.liege = {
						any_character_war = {
							primary_defender = {
								save_temporary_scope_as = defender_check
							}
						}
					}
					scope:defender = scope:defender_check
				}
				desc = msg_de_jure_duchy_war_invalidated_liege_war_message
			}
			desc = msg_de_jure_duchy_war_invalidated_message
		}
	}

	on_invalidated = {
	}

	on_declaration = {
		on_declared_war = yes

	}	

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = de_jure_cb_victory_desc_attacker
			}
			desc = de_jure_cb_victory_desc
		}

		
	}
	
	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }
		every_in_list = {
			list = target_titles
			limit = { exists = holder }
			
			holder = { save_scope_as = temp_de_jure_liege }
			add_hook_from_temp_de_jure_liege_to_attacker = yes
		}
	
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}
		
		every_in_list = {
			list = target_titles
			save_temporary_scope_as = target
		
		setup_de_jure_cb = {
			attacker = scope:attacker
			defender = scope:defender
			change = scope:change
			title = scope:target
		}
		}
		resolve_title_and_vassal_change = scope:change

		# Attacker gets Prestige Experience, Defender loses Prestige, all other participants gain Prestige based on their war contribution.
		modify_all_participants_fame_values = {
			WINNER = scope:attacker
			LOSER = scope:defender
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_de_jure_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = 10
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 100
			LOSER_ALLY_FAME_SCALE = 100
		}
		
		# truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = de_jure_cb_white_peace_desc_defender
			}
			desc = de_jure_cb_white_peace_desc
		}

		
	}
	
	on_white_peace = {
		scope:attacker = { show_pow_release_message_effect = yes }
		# Create an 'helper' de jure CB which we won't execute, but can use to determine how much Prestige should be given to war participants.
		every_in_list = {
			list = target_titles
			save_temporary_scope_as = target
		}
		setup_de_jure_cb = {
			attacker = scope:attacker
			defender = scope:defender
			victory = no
			title = scope:target
		}
		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = scope:cb_prestige_factor # Set by 'setup_de_jure_cb'
				multiply = -5.0
			}
		}
		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_de_jure_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 100
			LOSER_ALLY_FAME_SCALE = 100
		}
		# Defender neither gains nor loses any prestige.
		
		# Truce
		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = de_jure_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = de_jure_cb_defeat_desc_attacker
			}
			desc = de_jure_cb_defeat_desc
		}

		
	}
	
	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }
		# Attacker must pay the defender war reparations.
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 3
			}
		}

		# Create an 'helper' de jure CB which we won't execute, but can use to determine how much Prestige should be given to war participants.
		every_in_list = {
			list = target_titles
			save_temporary_scope_as = target
		}
		setup_de_jure_cb = {
			attacker = scope:attacker
			defender = scope:defender
			victory = no
			title = scope:target
		}
		# Attacker loses Prestige, all other participants gain Prestige based on their war contribution (Defender gets full Prestige).
		modify_all_participants_fame_values = {
			WINNER = scope:defender
			LOSER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_de_jure_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = scale_10_war_defender_win
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 100
			LOSER_ALLY_FAME_SCALE = 100
		}
	
		# Truce
		add_truce_attacker_defeat_effect = yes
		
		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}
	
	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit
	
	transfer_behavior = transfer
	
	attacker_allies_inherit = yes
	defender_allies_inherit = yes
	
	war_name = "DEJURE_CB_WAR_SPECIFIC_NAME"
	war_name_base = "DEJURE_CB_WAR_SPECIFIC_NAME_BASE"
	cb_name = DEJURE_CB_DUCHY_NAME
	cb_name_no_target = DEJURE_CB_DUCHY_NAME_GENERIC
	interface_priority = 99 # Below the "take all" one
	
	attacker_wargoal_percentage = 0.8
	
	max_ai_diplo_distance_to_title = 500
}