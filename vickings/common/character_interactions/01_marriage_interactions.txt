
arrange_marriage_interaction = {
	icon = icon_marriage
	category = interaction_category_diplomacy
	common_interaction = yes

	special_interaction = arrange_marriage_interaction
	interface = marriage
	use_diplomatic_range = {
		trigger_if = {
			limit = { exists = scope:secondary_actor.betrothed }
			NOT = {
				scope:secondary_actor = {
					betrothed = scope:secondary_recipient
				}
			}
		}
	}

	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:actor = scope:recipient
				}
				desc = arrange_marriage_interaction_desc_ruler_at_own_court
			}
			triggered_desc = {
				trigger = {
					scope:actor = {
						can_marry_character_trigger = {
							CHARACTER = scope:recipient
						}
					}
					scope:recipient = { is_ruler = yes }
				}
				desc = arrange_marriage_interaction_desc_both_rulers_can_marry
			}
			triggered_desc = {
				trigger = {
					scope:recipient = {
						is_ruler = yes
						can_marry_trigger = yes
					}
				}
				desc = arrange_marriage_interaction_desc_both_rulers_recipient_only_can_marry
			}
			triggered_desc = {
				trigger = {
					scope:recipient = {
						is_ruler = yes
					}
				}
				desc = arrange_marriage_interaction_desc_both_rulers_recipient_neither_can_marry
			}
			triggered_desc = {
				trigger = {
					scope:actor = {
						can_marry_character_trigger = {
							CHARACTER = scope:recipient
						}
					}
				}
				desc = arrange_marriage_interaction_desc_one_ruler_can_marry
			}
			desc = arrange_marriage_interaction_desc_recipient_one_ruler_cannot_marry
		}
	}
	
	redirect = {
		# If the define MARRIAGE_OWNER_IS_MATCHMAKER is set to yes, the actor must end up as the "matchmaker" link for courtiers
		scope:actor = {
			if = {
				limit = {
					exists = matchmaker
					NOT = { this = matchmaker }
				}
				save_scope_as = secondary_actor
				matchmaker = {
					save_scope_as = actor
				}
			}
			if = {
				limit = {
					is_betrothed = yes
					betrothed = scope:recipient
				}

				save_scope_as = secondary_actor
			}
		}

		scope:recipient = {
			if = {
				limit = {
					is_betrothed = yes
					betrothed.matchmaker = scope:actor
					is_adult = yes
					betrothed = {
						is_adult = yes
					}
				}

				save_scope_as = secondary_recipient
				matchmaker = {
					save_scope_as = recipient
				}
				betrothed = {
					save_scope_as = secondary_actor
				}
			}
			if = {
				limit = {
					exists = matchmaker
					NOT = { this = matchmaker }
				}
				save_scope_as = secondary_recipient
				matchmaker = {
					save_scope_as = recipient
				}
			}
		}
	}

	populate_actor_list = {
		scope:actor = {
			if = {
				limit = {
					trigger_if = {
						limit = { has_government = republic_government }
						scope:recipient = {
							NOR = {
								any_close_or_extended_family_member = {
									is_landed = yes
								}
								is_landed = yes
							}
						}
					}
				}
				add_to_list = characters
			}
			every_courtier = {
				limit = {
					trigger_if = {
						limit = {
							is_concubine = yes
						}
						is_concubine_of = scope:actor
						can_marry_character_trigger = { CHARACTER = scope:actor }
					}
					trigger_if = {
						limit = {
							dynasty = scope:actor.dynasty
							scope:recipient = {
								OR = {
									any_close_or_extended_family_member = {
										is_landed = yes
									}
									is_landed = yes
								}
							}
						}
						NOT = { scope:actor = { has_government = republic_government } }
					}
				}
				add_to_list = characters
			}
			every_courtier_away = {
				limit = {
					trigger_if = {
						limit = {
							is_concubine = yes
						}
						is_concubine_of = scope:actor
						can_marry_character_trigger = { CHARACTER = scope:actor }
					}
					trigger_if = {
						limit = {
							dynasty = scope:actor.dynasty
							scope:recipient = {
								OR = {
									any_close_or_extended_family_member = {
										is_landed = yes
									}
									is_landed = yes
								}
							}
						}
						NOT = { scope:actor = { has_government = republic_government } }
					}
				}
				add_to_list = characters
			}
			every_child = {
				even_if_dead = yes
				if = {
					limit = {
						is_alive = yes
						NOT = { is_in_list = characters }
						trigger_if = {
							limit = {
								is_concubine = yes
							}
							is_concubine_of = scope:actor
							can_marry_character_trigger = { CHARACTER = scope:actor }
						}
						trigger_if = {
							limit = { scope:actor = { has_government = republic_government } }
							scope:recipient = {
								NOR = {
									any_close_or_extended_family_member = {
										is_landed = yes
									}
									is_landed = yes
								}
							}
						}
					}
					add_to_list = characters
				}
				every_child = {
					even_if_dead = yes
					if = {
						limit = {
							is_alive = yes
							NOT = { is_in_list = characters }
							trigger_if = {
								limit = {
									is_concubine = yes
								}
								is_concubine_of = scope:actor
								can_marry_character_trigger = { CHARACTER = scope:actor }
							}
							trigger_if = {
								limit = { scope:actor = { has_government = republic_government } }
								scope:recipient = {
									NOR = {
										any_close_or_extended_family_member = {
											is_landed = yes
										}
										is_landed = yes
									}
								}
							}
						}
						add_to_list = characters
					}
					every_child = {
						if = {
							limit = {
								is_alive = yes
								NOT = { is_in_list = characters }
								trigger_if = {
									limit = {
										is_concubine = yes
									}
									is_concubine_of = scope:actor
									can_marry_character_trigger = { CHARACTER = scope:actor }
								}
								trigger_if = {
									limit = { scope:actor = { has_government = republic_government } }
									scope:recipient = {
										NOR = {
											any_close_or_extended_family_member = {
												is_landed = yes
											}
											is_landed = yes
										}
									}
								}
							}
							add_to_list = characters
						}
					}
				}
			}
		}
	}

	populate_recipient_list = {
		if = {
			limit = {
				OR = {
					scope:actor = { has_government = republic_government }
					scope:recipient = { has_government = republic_government }
				}
			}
			scope:recipient = {
				every_courtier = {
					limit = { NOT = { dynasty = scope:recipient.dynasty } }
					add_to_list = characters
				}
				every_courtier_away = {
					limit = { NOT = { dynasty = scope:recipient.dynasty } }
					add_to_list = characters
				}
			}
		}
		else = {
			scope:recipient = {
				add_to_list = characters
				every_courtier = {
					add_to_list = characters
				}
				every_courtier_away = {
					add_to_list = characters
				}
				every_child = {
					limit = {
						NOT = { is_in_list = characters }
					}
					add_to_list = characters
				}
			}
		}
	}

	interface_priority = 60

	cost = {
		prestige = {
			value = 0
			if = {
				limit = {
					exists = scope:actor
					exists = scope:recipient
					exists = scope:secondary_recipient
					exists = scope:secondary_actor
					scope:secondary_actor = { is_close_family_of = scope:actor }
					scope:recipient = {
						OR = {
							AND = {
								vassal_contract_has_flag = vassal_contract_marriage_favor
								is_allied_to = scope:actor
							}
							NOT = { vassal_contract_has_flag = vassal_contract_marriage_favor}
						}
					}
				}
				add = {
					scope:actor = {
						every_vassal = {
							limit = {
								vassal_contract_has_flag = vassal_contract_marriage_favor
								NOT = { is_allied_to = scope:actor }
								NOR = {
									this = scope:recipient
									this = scope:secondary_recipient
								}
							}
							add = medium_prestige_value
						}
					}
					desc = VASSAL_WITH_MARRIAGE_FAVOR
				}
			}

		}
	}

	# actor, recipient ... characters arranging the marriage
	# secondary_actor, secondary_recipient ... characters that should marry

	is_shown = {
		scope:actor = {
			OR = {
				is_landed = yes #Can arrange marriages for others
				#You're just a courtier? Only use the interaction on characters you can marry
				can_marry_character_trigger = { CHARACTER = scope:recipient }
			}
		}
		#If you're interacting with someone who isn't their own matchmaker, only show the interaction if they can get married. (If someone isn't their own matchmaker, they will be set as secondary_recipient by code and their matchmaker becomes recipient)
		trigger_if = {
			limit = { exists = scope:secondary_recipient }
			scope:secondary_recipient = {
				OR = {
					marriage_interaction_can_be_picked_trigger = yes #Can marry anyone
					AND = {
						ready_to_marry_betrothed_trigger = yes
						OR = {
							betrothed = scope:secondary_actor
							trigger_if = {
								limit = { exists = betrothed.liege }
								betrothed.liege = scope:actor
							}
						}
					}
				}
				#To account for a person marrying their concubines
				trigger_if = {
					limit = {
						is_concubine = yes
					}
					is_concubine_of = scope:actor
					can_marry_character_trigger = { CHARACTER = scope:actor }
				}
			}
		}
	}
	
	is_valid_showing_failures_only = {
		#If we're opening this interaction through the interaction menu (i.e. not all scopes exist yet)
		#This was giving double-warnings about a marry-able character existing so it's commented out for now
		#custom_description = {
		#	text = character_to_marry_exists
		#	object = scope:recipient
		#	scope:recipient = {
		#		OR = {
		#			any_courtier = {
		#				is_at_home = yes
		#				marriage_interaction_can_be_picked_trigger= yes
		#			}
		#			any_child = {
		#				marriage_interaction_can_be_picked_trigger= yes
		#			}
		#		}
		#	}
		#}
		trigger_if = {
			limit = {
				NAND = {
					exists = scope:secondary_actor
					exists = scope:secondary_recipient
				}
			}
			#There is an available marriage
			custom_description = {
				text = "basic_can_marry_check_recipient"
				subject = scope:actor
				object = scope:recipient
				scope:recipient = {
					OR = {
						AND = {
							#Recipient can marry
							can_marry_trigger = yes
							#To account for a person marrying their concubines
							trigger_if = {
								limit = {
									is_concubine = yes
								}
								is_concubine_of = scope:actor
								can_marry_character_trigger = { CHARACTER = scope:actor }
							}
						}
						AND = {
							is_ruler = yes #(Following are only for rulers)
							OR = {
								any_child = {
									matchmaker = scope:actor
									OR = {
										#Any of recipient's children can marry
										AND = {
											can_marry_trigger = yes
											#To account for a person marrying their concubines
											trigger_if = {
												limit = {
													is_concubine = yes
												}
												is_concubine_of = scope:actor
											}
										}
										#Any of recipient's children are ready to marry their betrothed
										AND = {
											ready_to_marry_betrothed_trigger = yes
											betrothed.matchmaker = scope:actor
										}
									}
								}
								any_courtier = {
									OR = {
										#Any of recipient's courtiers can marry
										AND = {
											can_marry_trigger = yes
											#To account for a person marrying their concubines
											trigger_if = {
												limit = {
													is_concubine = yes
												}
												is_concubine_of = scope:actor
											}
										}
										#Any of recipient's courtiers are ready to marry their betrothed
										AND = {
											ready_to_marry_betrothed_trigger = yes
											betrothed.matchmaker = scope:actor
										}
									}
								}
							}
						}
					}
				}
			}
		}
		#Diplomatic availability & prison
		scope:recipient = {
			is_busy_in_events_localised = yes
			is_imprisoned = no
		}
		NOT = {
			scope:actor = {
				is_at_war_with = scope:recipient
			}
		}
		trigger_if = { #(must be here because secondary_recipient can be set at the start)
			limit = {
				exists = scope:secondary_recipient
				NOT = { scope:secondary_recipient = scope:recipient }
			}
			scope:secondary_recipient = {
				is_busy_in_events_localised = yes
				is_imprisoned = no
			}
		}
		trigger_if = { #(must be here because secondary_recipient can be set at the start)
			limit = {
				exists = scope:secondary_actor
				NOT = { scope:secondary_actor = scope:actor }
			}
			scope:secondary_actor = {
				is_busy_in_events_localised = yes
				is_imprisoned = no
			}
		}
	}
	
	# whether a character can be picked for the interaction, interface only (e.g. picking the first character in the marriage interaction)
	# in character scope, actor and recipient event targets can be used, but not the secondary characters (because none exist yet)
	can_be_picked = {
		OR = {
			marriage_interaction_can_be_picked_trigger = yes
			AND = {
				exists = scope:secondary_actor
				exists = scope:secondary_recipient
				scope:secondary_actor.betrothed = scope:secondary_recipient
			}
		}
	}

	#Is evaluated only after secondary_recipient and secondary_actor are both chosen
	has_valid_target_showing_failures_only = {
		marriage_interaction_valid_target_trigger = yes  #Checks marriage status, betrothed, gender, consanguinity, faith hostility etc.

		#Blocks AI from marrying player guests
		scope:secondary_recipient = {
			trigger_if = {
				limit = {
					is_pool_guest = yes
					host = {
						is_ai = no
						NOT = { this = scope:actor }
					}
				}
				NOT = { is_pool_guest_of = host }
			}
		}
		
		#Blocks most AI's from marrying Evil faiths
		trigger_if = {
			limit = {
				scope:actor = {
					is_ai = yes
					NOT = { has_trait = cynical }
					#AI should honor betrothal even if faiths change
					NOT = { scope:secondary_actor.betrothed = scope:secondary_recipient }
				}
			}
			scope:recipient.faith = {
				faith_hostility_level = {
					target = scope:actor.faith
					value < faith_hostility_prevents_marriage_level
				}
			}
		}

		#Blocks AI from marrying single mayors in their area unless they are also mayors
		trigger_if = {
			limit = {
				scope:actor = {
					is_ai = yes
					NOT = { has_government = republic_government }
				}
			}
			NOT = {
				scope:recipient = { has_government = republic_government }
			}
		}
		
		trigger_if = { # Cultural Traditions, for AI
			limit = {
				scope:actor = {
					is_ai = yes
					culture = {
						has_cultural_parameter = dislikes_marrying_outside_of_culture
					}
				}
			}
			OR = {
				scope:actor.culture = scope:recipient.culture
				scope:actor.culture = scope:secondary_recipient.culture
			}
		}
	}

	pre_auto_accept = {
		if = {
			limit = {
				NOT = { scope:recipient = scope:actor }
			}
			scope:recipient = {
				if = {
					limit = { scope:secondary_actor.betrothed = scope:secondary_recipient }
					send_interface_toast = {
						type = msg_betrothal_fulfilled
						left_icon = scope:secondary_actor
						right_icon = scope:secondary_recipient
					}
				}
				else = {
					send_interface_toast = {
						type = msg_marriage_forced
						left_icon = scope:secondary_actor
						right_icon = scope:secondary_recipient
					}
				}
			}
		}
	}

	on_accept = {
		marriage_interaction_on_accept_effect = yes		
	}

	on_decline = {
		scope:actor = {
			if = {	
				limit = { NOT = { this = scope:recipient } }
				trigger_event = marriage_interaction.0011	
			}
		}
	}

	auto_accept = {
		marriage_interaction_auto_accept_trigger = yes #Strong hook conditions
	}

	ai_accept = {
		base = 0

		marriage_ai_accept_modifier = yes
	}

	send_option = {
		flag = matrilineal
		localization = MATRILINEAL_OFFER
		is_shown = {
			OR = {
				NOT = { exists = scope:secondary_actor }
				NOT = { exists = scope:secondary_recipient }
				scope:secondary_actor = { sex_opposite_of = scope:secondary_recipient }
			}
		}
		current_description = {
			triggered_desc = {
				trigger = {
					exists = scope:secondary_actor
					scope:secondary_actor = {
						betrothed = scope:secondary_recipient
						matrilinear_betrothal = yes
					}
				}
				desc = "MATRILINEAL_OFFER_BETROTHAL_INFO"
			}
		}
		can_be_changed = {
			trigger_if = {
				limit = {
					exists = scope:secondary_actor
				}
				scope:secondary_actor = {
					NOT = {
						betrothed = scope:secondary_recipient
					}
				}
			}
		}
		starts_enabled = {
			trigger_if = {
				limit = {
					exists = scope:secondary_actor
					scope:secondary_actor = {
						betrothed = scope:secondary_recipient
					}
				}
				scope:secondary_actor = {
					matrilinear_betrothal = yes
				}
			}
			trigger_else_if = {
				limit = {
					exists = scope:secondary_actor
					scope:actor = scope:secondary_actor
					is_female = yes
					is_ai = no
				}
				always = yes
			}
			trigger_else = {
				scope:actor = {
					OR= {
						faith = {
							has_doctrine = doctrine_gender_female_dominated
						}
						AND = {
							this = scope:recipient
							exists = scope:secondary_recipient
							scope:secondary_recipient = {
								is_female = yes
							}
							faith = { has_doctrine = doctrine_gender_equal }
						}
						AND = {
							exists = scope:secondary_actor
							scope:actor = scope:secondary_actor
							is_female = yes
							is_ai = no
						}
					}
				}
			}
		}
	}	

	send_option = {
		is_shown = {
			scope:secondary_actor = {
				NOT = {
					betrothed = scope:secondary_recipient
				}
			}
		}
		is_valid = {
			scope:actor = {
				has_usable_hook = scope:recipient
			}
		}
		flag = marriage_hook
		localization = MARRIAGE_HOOK
	}

	should_use_extra_icon = {
		scope:actor = { has_usable_hook = scope:recipient }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"
	
	send_options_exclusive = no
	
	show_effects_in_notification = no
	greeting = positive
	
	notification_text = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:secondary_actor = {
						is_adult = yes
					}
					scope:secondary_recipient = {
						is_adult = yes
					}
				}
				desc = {
					first_valid = {	
						triggered_desc = {
							trigger = {
								scope:matrilineal = yes
								scope:secondary_actor = scope:actor
								scope:secondary_recipient = scope:recipient
							}
							desc = MARRIAGE_NOTIFICATION_BOTH_PERSONAL_MATRI
						}
						triggered_desc = {
							trigger = {
								scope:matrilineal = yes
								scope:secondary_actor = scope:actor
							}
							desc = MARRIAGE_NOTIFICATION_ACTOR_PERSONAL_MATRI
						}
						triggered_desc = {
							trigger = {
								scope:matrilineal = yes
								scope:secondary_recipient = scope:recipient
							}
							desc = MARRIAGE_NOTIFICATION_RECIPIENT_PERSONAL_MATRI
						}
						triggered_desc = {
							trigger = {
								scope:matrilineal = yes
							}
							desc = MARRIAGE_NOTIFICATION_MATRI
						}
						triggered_desc = {
							trigger = {
								scope:secondary_actor = scope:actor
								scope:secondary_recipient = scope:recipient
							}
							desc = MARRIAGE_NOTIFICATION_BOTH_PERSONAL
						}
						triggered_desc = {
							trigger = {
								scope:secondary_actor = scope:actor
							}
							desc = MARRIAGE_NOTIFICATION_ACTOR_PERSONAL
						}
						triggered_desc = {
							trigger = {
								scope:secondary_recipient = scope:recipient
							}
							desc = MARRIAGE_NOTIFICATION_RECIPIENT_PERSONAL
						}
						desc = MARRIAGE_NOTIFICATION
					}
				}
			}
			desc = {
				first_valid = {	
					triggered_desc = {
						trigger = {
							scope:matrilineal = yes
							scope:secondary_actor = scope:actor
							scope:secondary_recipient = scope:recipient
						}
						desc = BETROTHAL_NOTIFICATION_BOTH_PERSONAL_MATRI
					}
					triggered_desc = {
						trigger = {
							scope:matrilineal = yes
							scope:secondary_actor = scope:actor
						}
						desc = BETROTHAL_NOTIFICATION_ACTOR_PERSONAL_MATRI
					}
					triggered_desc = {
						trigger = {
							scope:matrilineal = yes
							scope:secondary_recipient = scope:recipient
						}
						desc = BETROTHAL_NOTIFICATION_RECIPIENT_PERSONAL_MATRI
					}
					triggered_desc = {
						trigger = {
							scope:matrilineal = yes
						}
						desc = BETROTHAL_NOTIFICATION_MATRI
					}
					triggered_desc = {
						trigger = {
							scope:secondary_actor = scope:actor
							scope:secondary_recipient = scope:recipient
						}
						desc = BETROTHAL_NOTIFICATION_BOTH_PERSONAL
					}
					triggered_desc = {
						trigger = {
							scope:secondary_actor = scope:actor
						}
						desc = BETROTHAL_NOTIFICATION_ACTOR_PERSONAL
					}
					triggered_desc = {
						trigger = {
							scope:secondary_recipient = scope:recipient
						}
						desc = BETROTHAL_NOTIFICATION_RECIPIENT_PERSONAL
					}
					desc = BETROTHAL_NOTIFICATION
				}
			}
		}
	}
}

#This interaction is referenced in code! If it's renamed you have to ping a coder
marry_off_interaction = {
	icon = icon_marriage
	category = interaction_category_diplomacy
	common_interaction = yes

	desc = marry_off_interaction_desc
	
	send_name = marry_off_send
	needs_recipient_to_open = no
	special_interaction = arrange_marriage_interaction
	interface = marriage
	redirect = {
		if = {
			limit = {
				exists = scope:secondary_actor
			}
			scope:recipient = {
				save_scope_as = secondary_recipient
				matchmaker = {
					save_scope_as = recipient
				}
			}

		}
		else_if = {
			scope:recipient = {
				save_scope_as = secondary_actor
			}
			clear_saved_scope = recipient
		}
	}

	populate_recipient_list = {
		scope:secondary_actor = {
			if = {
				limit = { has_government = republic_government }
				every_spouse_candidate = {
					limit = {
						NOR = {
							is_landless_ruler = yes
							any_close_or_extended_family_member = {
								is_landed = yes
							}
							is_landed = yes
							faith.religious_head = this
							NOT = { scope:secondary_actor.faith = faith }
						}
					}
					add_to_list = characters
				}
			}
			else = {
				every_spouse_candidate = {
					limit = {
						NAND = {
							is_landless_ruler = yes
							faith.religious_head = this
							NOT = { scope:secondary_actor.faith = faith }
						}
					}
					add_to_list = characters
				}
			}
		}
	}

	cost = {
		prestige = {
			value = 0
			if = {
				limit = {
					exists = scope:actor
					exists = scope:recipient
					exists = scope:secondary_recipient
					scope:recipient = {
						OR = {
							AND = {
								vassal_contract_has_flag = vassal_contract_marriage_favor
								is_allied_to = scope:actor
							}
							NOT = { vassal_contract_has_flag = vassal_contract_marriage_favor}
						}
					}
				}
				add = {
					scope:actor = {
						every_vassal = {
							limit = {
								vassal_contract_has_flag = vassal_contract_marriage_favor
								NOT = { is_allied_to = scope:actor }
								NOR = {
									this = scope:recipient
									this = scope:secondary_recipient
								}
							}
							add = medium_prestige_value
						}
					}
					desc = VASSAL_WITH_MARRIAGE_FAVOR
				}
			}

		}
	}

	interface_priority = 60

	# actor, recipient ... characters arranging the marriage
	# secondary_actor, secondary_recipient ... characters that should marry

	is_shown = {
		scope:secondary_actor = {
			#Is this someone I can marry off?
			OR = {
				is_courtier_of = scope:actor
				AND = {
					is_child_of = scope:actor
					target_is_liege_or_above = scope:actor
				}
				scope:actor = this
			}
			#They can be married
			can_marry_trigger = yes
			#To account for a person marrying their concubines
			trigger_if = {
				limit = {
					is_concubine = yes
				}
				is_concubine_of = scope:actor
				can_marry_character_trigger = { CHARACTER = scope:actor }
			}
		}
	}

	is_valid_showing_failures_only = {
		#Diplomatic availability & prison
		scope:secondary_actor = {
			is_busy_in_events_localised = yes
			is_imprisoned = no
		}
	}

	has_valid_target_showing_failures_only = {
		marriage_interaction_valid_target_trigger = yes  #Checks marriage status, betrothed, gender, consanguinity, faith hostility etc.

		#Diplomatic availability & prison (located here because these will never be set at the start)
		scope:recipient = {
			is_busy_in_events_localised = yes
			is_imprisoned = no
		}
		NOT = {
			scope:actor = {
				is_at_war_with = scope:recipient
			}
		}
		trigger_if = {
			limit = { NOT = { scope:recipient = scope:secondary_recipient } }
			scope:secondary_recipient = {
				is_busy_in_events_localised = yes
				is_imprisoned = no
			}
		}
		#secondary_actor is checked above because they are always available

		#Blocks AI from marrying player guests
		scope:secondary_recipient = {
			trigger_if = {
				limit = {
					is_pool_guest = yes
					host = {
						is_ai = no
						NOT = { this = scope:actor }
					}
				}
				NOT = { is_pool_guest_of = host }
			}
		}
	}

	on_accept = {
		marriage_interaction_on_accept_effect = yes
	}

	on_decline = {
		scope:actor = {
			if = {	
				limit = { NOT = { this = scope:recipient } }
				trigger_event = marriage_interaction.0011	
			}
		}
	}

	auto_accept = {
		marriage_interaction_auto_accept_trigger = yes #Strong hook conditions
	}
	
	ai_accept = {
		base = 0 # Should be 0 for all interactions
		
		marriage_ai_accept_modifier = yes
	}
	
	send_option = {
		flag = matrilineal
		localization = "MATRILINEAL_OFFER"
		starts_enabled = {
			scope:actor = {
				OR= {
					faith = {
						has_doctrine = doctrine_gender_female_dominated
					}
					AND = {
						scope:secondary_actor = { is_female = yes }
						faith = { has_doctrine = doctrine_gender_equal }
					}
					AND = {
						exists = scope:secondary_actor
						scope:actor = scope:secondary_actor
						is_female = yes
						is_ai = no
					}
				}
			}
		}
	}
	
	send_option = {
		is_valid = {
			scope:actor = {
				has_usable_hook = scope:recipient
			}
		}
		flag = marriage_hook
		localization = MARRIAGE_HOOK
	}
	#This option cannot be linked with the hook icon, because recipient isn't known in the right-click menu
	
	send_options_exclusive = no
	
	show_effects_in_notification = no
	greeting = positive
	
	notification_text = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:secondary_actor = {
						is_adult = yes
					}
					scope:secondary_recipient = {
						is_adult = yes
					}
				}
				desc = {
					first_valid = {	
						triggered_desc = {
							trigger = {
								scope:matrilineal = yes
								scope:secondary_actor = scope:actor
								scope:secondary_recipient = scope:recipient
							}
							desc = MARRIAGE_NOTIFICATION_BOTH_PERSONAL_MATRI
						}
						triggered_desc = {
							trigger = {
								scope:matrilineal = yes
								scope:secondary_actor = scope:actor
							}
							desc = MARRIAGE_NOTIFICATION_ACTOR_PERSONAL_MATRI
						}
						triggered_desc = {
							trigger = {
								scope:matrilineal = yes
								scope:secondary_recipient = scope:recipient
							}
							desc = MARRIAGE_NOTIFICATION_RECIPIENT_PERSONAL_MATRI
						}
						triggered_desc = {
							trigger = {
								scope:matrilineal = yes
							}
							desc = MARRIAGE_NOTIFICATION_MATRI
						}
						triggered_desc = {
							trigger = {
								scope:secondary_actor = scope:actor
								scope:secondary_recipient = scope:recipient
							}
							desc = MARRIAGE_NOTIFICATION_BOTH_PERSONAL
						}
						triggered_desc = {
							trigger = {
								scope:secondary_actor = scope:actor
							}
							desc = MARRIAGE_NOTIFICATION_ACTOR_PERSONAL
						}
						triggered_desc = {
							trigger = {
								scope:secondary_recipient = scope:recipient
							}
							desc = MARRIAGE_NOTIFICATION_RECIPIENT_PERSONAL
						}
						desc = MARRIAGE_NOTIFICATION
					}
				}
			}
			desc = {
				first_valid = {	
					triggered_desc = {
						trigger = {
							scope:matrilineal = yes
							scope:secondary_actor = scope:actor
							scope:secondary_recipient = scope:recipient
						}
						desc = BETROTHAL_NOTIFICATION_BOTH_PERSONAL_MATRI
					}
					triggered_desc = {
						trigger = {
							scope:matrilineal = yes
							scope:secondary_actor = scope:actor
						}
						desc = BETROTHAL_NOTIFICATION_ACTOR_PERSONAL_MATRI
					}
					triggered_desc = {
						trigger = {
							scope:matrilineal = yes
							scope:secondary_recipient = scope:recipient
						}
						desc = BETROTHAL_NOTIFICATION_RECIPIENT_PERSONAL_MATRI
					}
					triggered_desc = {
						trigger = {
							scope:matrilineal = yes
						}
						desc = BETROTHAL_NOTIFICATION_MATRI
					}
					triggered_desc = {
						trigger = {
							scope:secondary_actor = scope:actor
							scope:secondary_recipient = scope:recipient
						}
						desc = BETROTHAL_NOTIFICATION_BOTH_PERSONAL
					}
					triggered_desc = {
						trigger = {
							scope:secondary_actor = scope:actor
						}
						desc = BETROTHAL_NOTIFICATION_ACTOR_PERSONAL
					}
					triggered_desc = {
						trigger = {
							scope:secondary_recipient = scope:recipient
						}
						desc = BETROTHAL_NOTIFICATION_RECIPIENT_PERSONAL
					}
					desc = BETROTHAL_NOTIFICATION
				}
			}
		}
	}
}

find_concubine = {
	category = interaction_category_diplomacy

	desc = find_concubine_desc

	interface = concubine_list

	needs_recipient_to_open = no

	redirect = {
		scope:actor = { # The UI will open to the already filled left first if we don't tell it we've got "our side" actor which is always ourselves
			save_scope_as = secondary_actor
		}
	}

	populate_recipient_list = {
		scope:actor = {
			every_courtier = {
				limit = {
					can_become_concubine_of_character_trigger = { CHARACTER = scope:actor }
				}
				add_to_list = characters
			}
			every_prisoner = {
				limit = {
					NOT = { is_in_list = characters }
					can_become_concubine_of_character_trigger = { CHARACTER = scope:actor }
				}
				add_to_list = characters
			}
		}
	}

	is_shown = {
		scope:actor = {
			allowed_concubines = yes
			is_adult = yes
			trigger_if = { #So that we show the recipient list, but can also only use this on ourselves, we have to do this check in the beginning
				limit = {
					NOT = { exists = scope:secondary_recipient }
				}
				scope:actor = scope:recipient
			}
			NOT = { has_government = republic_government }
		}
		trigger_if = {
			limit = {
				NOT = { scope:actor = scope:recipient }
			}
			scope:actor = {
				trigger_if = {
					limit = {
						allowed_to_marry_same_sex_trigger = no
					}
					sex_opposite_of = scope:recipient
				}
				NOT = { relation_with_character_is_incestuous_in_my_faith_trigger = { CHARACTER = scope:recipient } }
			}
			scope:recipient = {
				can_become_concubine_of_character_trigger = { CHARACTER = scope:actor }
				is_adult = yes
				OR = {
					is_imprisoned_by = scope:actor
					is_courtier_of = scope:actor
				}
			}
		}
	}

	is_valid_showing_failures_only = {
		custom_description = {
			text = take_concubine_allowed_more
			object = scope:recipient
			scope:actor = {
				allowed_more_concubines = yes
			}
		}
		custom_description = {
			text = take_concubine_available_character_opp
			object = scope:actor
			scope:actor = {
				OR = {
					any_courtier = {
						can_become_concubine_of_character_trigger = { CHARACTER = scope:actor }
					}
					any_prisoner = {
						can_become_concubine_of_character_trigger = { CHARACTER = scope:actor }
					}
				}
			}
		}
		trigger_if = {
			limit = {
				NOT = { scope:actor = scope:recipient }
			}
			scope:recipient = {
				can_become_concubine_of_character_trigger = { CHARACTER = scope:actor }
			}
		}
		trigger_if = {
			limit = { scope:actor = { faith = { has_doctrine = doctrine_chinese_concubines } } }
			custom_description = {
				text = take_concubine_allowed_more	#take_concubine_taoism
				scope:actor = {
					OR = {
						has_title = title:e_china
						number_of_concubines < 3
					}
				}
			}
		}
	}

	can_be_picked = {
		is_adult = yes
	}

	auto_accept = yes

	ai_will_do = {
		base = 0
	}
	
	on_accept = {
		concubine_on_accept_effect = yes
	}
}

offer_concubine = {
	category = interaction_category_diplomacy

	desc = offer_concubine_desc

	ai_targets = {
		ai_recipients = neighboring_rulers
	}
	ai_target_quick_trigger = {
		adult = yes
	}
	ai_frequency = 144

	greeting = positive
	notification_text = OFFER_CONCUBINE_NOTIFICATION

	#interface = concubine_list

	needs_recipient_to_open = yes

	populate_actor_list = {
		scope:actor = {
			every_courtier = {
				limit = {
					can_be_offered_as_concubine_to_character_trigger = {
						GIVER = scope:actor
						CHARACTER = scope:recipient
					}
				}
				add_to_list = characters
			}
			every_prisoner = {
				limit = {
					NOT = { is_in_list = characters }
					can_be_offered_as_concubine_to_character_trigger = {
						GIVER = scope:actor
						CHARACTER = scope:recipient
					}
				}
				add_to_list = characters
			}
		}
	}

	is_shown = {
		NOT = { scope:actor = scope:recipient }
		scope:actor = {
			faith = { has_doctrine = doctrine_concubines }
		}
		scope:recipient = {
			allowed_concubines = yes
			is_adult = yes
			NOT = { has_government = republic_government }
		}
	}

	is_valid_showing_failures_only = {
		custom_description = {
			text = take_concubine_available_character_opp
			object = scope:recipient
			scope:actor = {
				OR = {
					any_courtier = {
						can_be_offered_as_concubine_to_character_trigger = {
							GIVER = scope:actor
							CHARACTER = scope:recipient
						}
					}
					any_prisoner = {
						can_be_offered_as_concubine_to_character_trigger = {
							GIVER = scope:actor
							CHARACTER = scope:recipient
						}
					}
				}
			}
		}
		custom_description = {
			text = take_concubine_allowed_more
			object = scope:recipient
			scope:recipient = {
				allowed_more_concubines = yes
			}
		}
	}

	can_be_picked = {
		is_adult = yes
	}

	can_send = {
		custom_description = {
			text = character_unavailable_to_be_offered_as_concubine
			object = scope:secondary_actor
			scope:secondary_actor = {
				can_be_offered_as_concubine_to_character_trigger = {
					GIVER = scope:actor
					CHARACTER = scope:recipient
				}
			}
		}
	}

	auto_accept = no

	ai_accept = {
		base = 50
		
		modifier = {
			add = {
				value = 50
				multiply = scope:secondary_actor.num_of_good_genetic_traits
			}
			scope:secondary_actor = {
				num_of_good_genetic_traits > 0
				trigger_if = {
					limit = {
						is_female = yes
					}
					age < define:NChildbirth|MAX_FEMALE_REPRODUCTION_AGE
				}
			}
			desc = AI_POSITIVE_TRAIT_REASON
		}

		modifier = {
			add = {
				value = 50
			}
			scope:secondary_actor = {
				is_lowborn = no
				trigger_if = {
					limit = {
						is_female = yes
					}
					age < define:NChildbirth|MAX_FEMALE_REPRODUCTION_AGE
				}
			}
			desc = AI_DYNASTY_PRESTIGE_REASON_NOBLE
		}

		modifier = {
			add = {
				value = -50
				multiply = scope:secondary_actor.num_of_bad_genetic_traits
			}
			scope:secondary_actor = {
				OR = {
					num_of_bad_genetic_traits > 0
				}
				trigger_if = {
					limit = {
						is_female = yes
					}
					age < define:NChildbirth|MAX_FEMALE_REPRODUCTION_AGE
				}
			}
			desc = AI_NEGATIVE_TRAIT_REASON
		}

		modifier = {
			add = {
				value = -50
			}
			scope:secondary_actor = {
				is_lowborn = yes
				num_of_good_genetic_traits = 0
				trigger_if = {
					limit = {
						is_female = yes
					}
					age < define:NChildbirth|MAX_FEMALE_REPRODUCTION_AGE
				}
			}
			desc = AI_DYNASTY_PRESTIGE_REASON_LOWBORN_NO_POSITIVE_TRAIT
		}

		opinion_modifier = { # Opinion of you
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 1.0
			desc = AI_OPINION_REASON
		}

		opinion_modifier = { # Opinion of concubine
			who = scope:recipient
			opinion_target = scope:secondary_actor
			multiplier = 0.25
			desc = AI_OPINION_REASON
		}

		compare_modifier = { # Recipient is reluctant to marry old women (procreation is a key factor)
			trigger = {
				scope:secondary_actor = {
					age > 29
					is_female = yes
				}
			}
			target = scope:secondary_actor
			value = age
			multiplier = -5.0
			step = 1
			offset = -29
			desc = MARRY_AGE
		}

		modifier = { # A Recipient is unwilling to take a same-sex concubine if their faith doesn't support it
			add = -1000
			
			scope:recipient = {
				allowed_to_marry_same_sex_trigger = no
				sex_same_as = scope:secondary_actor
			}
			desc = SAME_SEX_MARRIAGE_FAITH_REASON_RECIPIENT
		}

		modifier = { # Unwilling if they don't have a batch of kids and opposite sex consorts to handle that situation
			add = -200
			scope:recipient = {
				allowed_to_marry_same_sex_trigger = yes
				sex_same_as = scope:secondary_actor
				trigger_if = {
					limit = {
						NOT = {
							any_consort = {
								can_have_children_with = { CHARACTER = scope:recipient }
								fertility > 0.1
							}
						}
					}
					any_child = {
						is_player_heir_of_trigger = { CHARACTER = root }
					}
				}
				trigger_else = {
					always = no
				}
			}
			desc = AI_NO_FERTILITY_REASON
		}

		modifier = {
			add = 50
			scope:recipient = {
				is_attracted_to_gender_of = scope:secondary_actor
			}
			desc = AI_ATTRACTION_REASON
		}

		modifier = { # A Recipient is more likely to agree if you're their liege
			add = 40
			
			scope:recipient = {
				target_is_liege_or_above = scope:actor
			}
			desc = LIEGE_REASON
		}

		#More/Less likely based on difference in rank between actor and recipient
		modifier = {
			add = 20
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value = 1
				}
			}
			desc = AI_RANK_DIFF
		}
		modifier = {
			add = 30
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value = 2
				}
			}
			desc = AI_RANK_DIFF
		}
		modifier = {
			add = 40
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value = 3
				}
			}
			desc = AI_RANK_DIFF
		}
		modifier = {
			add = 50
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value = 4
				}
			}
			desc = AI_RANK_DIFF
		}
		modifier = {
			add = 60
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value = 5
				}
			}
			desc = AI_RANK_DIFF
		}
		modifier = {
			add = -20
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value = -1
				}
			}
			desc = AI_RANK_DIFF
		}
		modifier = {
			add = -30
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value = -2
				}
			}
			desc = AI_RANK_DIFF
		}
		modifier = {
			add = -40
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value = -3
				}
			}
			desc = AI_RANK_DIFF
		}
		modifier = {
			add = -50
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value = -4
				}
			}
			desc = AI_RANK_DIFF
		}
		modifier = {
			add = -60
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value = -5
				}
			}
			desc = AI_RANK_DIFF
		}
		
		modifier = {
			add = intimidated_reason_value
			scope:recipient = {
				target_is_liege_or_above = scope:actor
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
			desc = INTIMIDATED_REASON
		}
		modifier = {
			add = cowed_reason_value
			scope:recipient = {
				target_is_liege_or_above = scope:actor
				has_dread_level_towards = {
					target = scope:actor
					level = 2
				}
			}
			desc = COWED_REASON
		}
		
		modifier = {
			add = intimidated_external_reason_value
			scope:recipient = {
				NOT = { target_is_liege_or_above = scope:actor }
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
			desc = INTIMIDATED_REASON
		}
		modifier = {
			add = cowed_external_reason_value
			scope:recipient = {
				NOT = { target_is_liege_or_above = scope:actor }
				has_dread_level_towards = {
					target = scope:actor
					level = 2
				}
			}
			desc = COWED_REASON
		}
		modifier = {
			add = -250
			scope:secondary_actor = {
				has_std_trigger = yes
			}
			desc = AI_STD_REASON
		}
		modifier = {
			add = -250
			scope:secondary_actor = {
				has_epidemic_disease_trigger = yes
			}
			desc = AI_CONTAGIOUS_REASON
		}
		modifier = {
			add = -5000
			scope:secondary_actor = {
				fertility <= 0
			}
			desc = AI_FERTILITY_REASON
		}
		modifier = {
			scope:hook = yes
			add = 500
			scope:actor = { NOT = { has_strong_hook = scope:recipient } }
			desc = SCHEME_WEAK_HOOK_USED
		}
		modifier = {
			scope:hook = yes
			add = 1000
			scope:actor = { has_strong_hook = scope:recipient }
			desc = SCHEME_STRONG_HOOK_USED
		}
	}

	ai_potential = {
		is_adult = yes
		NOT = { has_trait = incapable }
		is_at_war = no
		NOR = {
			has_trait = greedy
			ai_greed > very_high_positive_ai_value
		}
		faith = { has_doctrine = doctrine_concubines }
	}

	ai_will_do = {
		base = 0
		
		modifier = { # Basic Filtering
			add = 100
			scope:recipient = {
				number_of_concubines < number_of_desired_concubines
			}
			scope:secondary_actor = {
				trigger_if = {
					limit = {
						allowed_to_marry_same_sex_trigger = no
					}
					sex_opposite_of = scope:recipient
				}
				fertility > 0.2
				age < 36
				NOR = {
					is_councillor_of = scope:actor
					is_of_major_interest_trigger = {
						CHARACTER = scope:actor
					}
					is_concubine_of = scope:actor
				}
			}
		}

		modifier = { # If secondary_actor is close to actor, a good character, or if actor should take them as concubine
			add = -100
			scope:secondary_actor = {
				is_of_minor_interest_trigger = {
					CHARACTER = scope:actor
				}
				AND = {
					can_become_concubine_of_character_trigger = { CHARACTER = scope:actor }
					scope:actor = { number_of_concubines < number_of_desired_concubines }
				}
			}
		}

		modifier = { # If secondary_actor could be an agent...
			add = 25
			any_scheme = {
				scheme_target = scope:recipient
				save_temporary_scope_as = scheme_check
			}
			scope:secondary_actor = {
				is_valid_as_agent_in_scheme = scope:scheme_check
			}
		}
		
		modifier = { # More likely if it's a neighboring ruler that you want to like you
			add = 50
			scope:recipient = {
				any_neighboring_top_liege_realm_owner = { this = scope:actor }
				max_military_strength > scope:actor.max_military_strength
			}
		}
		
		modifier = { # More likely if its your friend and it's a nice concubine
			add = 50
			scope:recipient = {
				OR = {
					has_relation_friend = scope:actor
					has_relation_best_friend = scope:actor
				}
			}
			scope:secondary_actor = {
				fertility > 0.2
				age < 36
				OR = {
					has_trait = lustful
					num_of_good_genetic_traits > 0
				}
			}
		}

		modifier = { #Even if they're allowed to take same-sex concubines we don't want the AI to suggest it without a good reason if they're not attracted to the person
			add = -200
			scope:recipient = {
				allowed_to_marry_same_sex_trigger = yes
				sex_same_as = scope:secondary_actor
				NOT = { is_attracted_to_gender_of = scope:secondary_actor }
			}
		}

		modifier = { # No if it's a same-sex concubinage and actor isn't accepting of it
			factor = 0
			scope:actor = {
				allowed_to_marry_same_sex_trigger = no
				scope:recipient = { sex_same_as = scope:secondary_actor }
			}
		}

		modifier = { # No if it's a same-sex concubinage and recipient isn't accepting of it
			factor = 0
			scope:recipient = {
				allowed_to_marry_same_sex_trigger = no
				sex_same_as = scope:secondary_actor
			}
		}

		modifier = { # Incest Filtering: Hard NO!
			factor = 0
			scope:recipient = {
				relation_with_character_is_incestuous_in_my_faith_trigger = { CHARACTER = scope:secondary_actor }
				NOR = {
					accepts_incest_with_trigger = { CHARACTER = scope:secondary_actor }
					sexually_liberal_trigger = yes
				}
			}
		}

		modifier = { # Incest Filtering: Not likely, but keep the door open...
			factor = 0.2 
			scope:recipient = {
				relation_with_character_is_incestuous_in_my_faith_trigger = { CHARACTER = scope:secondary_actor }
				OR = {
					accepts_incest_with_trigger = { CHARACTER = scope:secondary_actor }
					sexually_liberal_trigger = yes
				}
			}
		}

		modifier = { # Faith considerations
			factor = 0
			scope:recipient = {
				faith = {
					faith_hostility_level = {
						target = scope:actor.faith
						value >= faith_hostile_level
					}
				}
				NOR = {
					has_relation_friend = scope:actor
					has_relation_best_friend = scope:actor
				}
			}
		}
	}

	on_send = {
		scope:secondary_actor = { # to block the same character from being offered twice
			add_character_flag = {
				flag = has_been_offered_as_concubine
				days = 5
			}
		}
	}
	
	on_accept = {
		concubine_offer_on_accept_effect = yes
	}

	on_decline = {
		scope:actor = {
			send_interface_toast = {
				type = event_generic_neutral
				title = msg_concubine_offer_rejected_title
				right_icon = scope:recipient
				left_icon = scope:secondary_actor
				custom_tooltip = msg_concubine_offer_rejected
			}
		}
	}

	send_options_exclusive = no
	send_option = {
		is_valid = {
			scope:actor = {
				has_usable_hook = scope:recipient
			}
		}
		flag = hook
		localization = SCHEME_HOOK
	}
	should_use_extra_icon = {
		scope:actor = { has_usable_hook = scope:recipient }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"
}

divorce_character_interaction = {
	category = interaction_category_diplomacy
	use_diplomatic_range = no

	desc = divorce_character_interaction_desc

	cost = {
		piety = divorce_cost
	}

	is_shown = {
		scope:actor.faith = {
			# We are not required to seek approval of a spiritual HoF
			NAND = {
				has_doctrine = doctrine_divorce_approval
				has_doctrine = doctrine_spiritual_head
				exists = religious_head
			}
			# We are not required to seek approval of a house head
			NAND = {
				has_doctrine = doctrine_divorce_approval
				exists = scope:actor.house
				exists = scope:actor.house.house_head
				scope:actor = { is_house_head = no }
			}
		}
		scope:recipient = {
			is_spouse_of = scope:actor
			is_concubine = no # Can set aside Concubines at any time
		}
	}

	is_valid_showing_failures_only = {
		custom_tooltip = {
			NOT = {
				scope:actor.culture = {
					has_cultural_parameter = cannot_divorce
				}
			}
			text = CULTURE_FORBIDS_DIVORCE
		}
		NOT = {
			scope:actor.faith = {
				has_doctrine = doctrine_divorce_disallowed
			}
		}
		scope:recipient = { is_busy_in_events_localised = yes }
		scope:recipient = { NOT = { has_strong_hook = scope:actor } }
	}

	auto_accept = yes

	on_accept = {
		scope:actor = {
			divorce_effect = {
				DIVORCER = scope:actor
				DIVORCEE = scope:recipient
			}
			if = {
				limit = {
					allowed_concubines = yes
				}
				custom_tooltip = divorce_cannot_concubine_ex_wife
			}
		}
		scope:recipient = {
			trigger_event = marriage_interaction.0030
		}
	}
	
	# AI
	ai_targets = {
		ai_recipients = spouses
	}
	ai_frequency = 36
	
	ai_potential = {
		is_ruler = yes
	}

	ai_will_do = {
		base = 0

		modifier = { # The AI wants to divorce should they not have an heir that is their own child, and their spouse is infertile
			add = 100
			scope:actor = {
				fertility > 0.1
				NOT = {
					any_child = {
						is_heir_of = scope:actor
					}
				}
				NAND = {
					this = character:8000010	# for some reason, this guy never divorced, why should he here?
					primary_heir = character:8000012	# of course, only divorce if primary heir is not historical
				}
			}
			scope:recipient = {
				is_ai = yes
				fertility < 0.1
			}
		}

		modifier = { # The AI will divorce if they're in a same-sex marriage and their faith changes its stance on the topic
			add = 100
			scope:actor = {
				sex_same_as = scope:recipient
				allowed_to_marry_same_sex_trigger = no
			}
		}
	}
}
